<launch>

  <!-- these are the arguments you can pass this launch file, for example paused:=true -->
  <arg name="paused" default="false"/>
  <arg name="use_sim_time" default="true"/>
  <arg name="gui" default="true"/>
  <arg name="headless" default="false"/>
  <arg name="debug" default="false"/>

  <!-- Load the URDF into the ROS Parameter Server -->
  <param name="robot_description"
	 command="$(find xacro)/xacro '$(find mybot_description)/urdf/mybot.xacro'" />

  <!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find mybot_gazebo)/worlds/mybot.world"/>
    <arg name="debug" value="$(arg debug)" />
    <arg name="gui" value="$(arg gui)" />
    <arg name="paused" value="$(arg paused)"/>
    <arg name="use_sim_time" value="$(arg use_sim_time)"/>
    <arg name="headless" value="$(arg headless)"/>
  </include>

  <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
  <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
	args="-urdf -model mybot -param robot_description"/>

  <!-- Run RVIZ-->
  <!-- 
  <node name="$(anon rviz)" pkg="rviz" type="rviz" args="$(find mybot_gazebo)/mybot.rviz" output="screen"/>
	-->
	
  <!-- ros_control mybot launch file -->  
  <include file="$(find mybot_control)/launch/mybot_control.launch" />

  <!-- roboteq emulation -->
  <group ns="front">
    <node name="drvr"        pkg="roboteq"      type="drvr" respawn="true"/>
  </group>

  <!-- sbg emulation -->
  <node name="imu_conv_node" pkg="imu_conv" type="imu_conv_node" output="screen">
    <rosparam command="load" file="$(find mybot_gazebo)/config/imu_conv.yaml" />
  </node>

  <!-- /vel emulation -->
  <node name="vel" pkg="topic_tools" type="transform"
     args="/fix_velocity 
     /vel 
     geometry_msgs/TwistStamped 
     geometry_msgs.msg.TwistStamped(header=m.header,twist=geometry_msgs.msg.Twist(linear=geometry_msgs.msg.Vector3(m.vector.x,m.vector.y,m.vector.z),angular=geometry_msgs.msg.Vector3())) 
     --import geometry_msgs std_msgs rospy"
     respawn="true" />

</launch>
